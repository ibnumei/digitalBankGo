SECTION  1

1.1
Link dbdesigner : https://erd.dbdesigner.net/designer/schema/1689137845-digital-bank
1.2
setting docker images postgres:
  - docker pull postgres:12-alpine
  - docker run --name postgres12 -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=mysecretpassword -d postgres:12-alpine
  - docker exec -it postgres12 psql -U root
  - docker logs postgres12
  - docker stop postgres12
  - docker start postgres12
1.3
  - use golang-migrate => brew install golang-migrate
  - migrate create -ext sql -dir db/migration -seq init_schema (initialize/using migration using golang migrate)
  - create Makefile (for using shortcut in terminal to execute common command)
  - create postgres, createdb, dropdb, migrateup & migratedown command  at Makefile
1.4
  - using sqlc for write query db (write first query, golang CRUD codes will automatically generated)
  - brew install sqlc
  - sqlc init => generate sqlc.yaml
  - create sqlc command at Makefile
  - create account.sql in query folder, write query sql, comment at the top of query is important,
    comment will instruct sqlc how to generate golang function signature for this query. Ex `name CreateAccount :one` => createAccount is name function, one  for return 1 single Account object
  - after write query, run make sqlc, for the first time, it will generates 3 file at sqlc folder, (account.sql.go, db.go & models.go)
1.5
  - create main_test.go (connection test for db)
  - go get github.com/lib/pq for test postgres
  - go mod tidy
  - go get github.com/stretchr/testify
folder util->random.go
1.6
Example: Transfer 10 USD from bank acc1 to bank acc2
  1. Create a transfer record with amount = 10
  2. Create an account entry for acc1 with amount = -10
  3. Create an account entry for acc2 with amount = +10
  4. Update balance acc1 -10
  5. Update balance acc2 +10
  - Struct Queries di db.go hanya mendukung 1 Query Operation, tidak mendukung banyak operation,
    sehingga tidak mendukung penggunaan transaction. Maka dibuat store.go => Struct Store
  - GetAccountForUpdate in account.sql, query FOR UPDATE diganti menjadi FOR NO KEY UPDATE,
    untuk menghindari deadlock, memberi tau postgres bahwa ID(yg jadi foreign key di table lain) tidak di update
1.8
Potential Deadlock:
  Transaksi 1: Transfer $10 from account1 to account2
  Transaksi 2: Transfer $10 from account2 to account1
  Scenario:
    1. Tx1 => UPDATE accounts SET balance = balance -10 WHERE ID = 1 RETURNING *;
    2. Tx2 => UPDATE accounts SET balance = balance -10 WHERE ID = 2 RETURNING *;
    3. Tx1 => UPDATE accounts SET balance = balance + 10 WHERE ID = 2 RETURNING *;  (Lock, karena Transaksi ke 2, sedang mengupdate ID=2 dan belum selesai)
    4. Tx2 => UPDATE accounts SET balance = balance + 10 WHERE ID = 1 RETURNING *;  (DeadLock, karena Transaksi ke 4 menunggu Tx ke 1, Tx1 menunggu  Tx ke 3, Tx menunggu  Tx2)

  Scenario Avoid Deadlock:
    1. Tx1 => UPDATE accounts SET balance = balance -10 WHERE ID = 1 RETURNING *;
    2. Tx2 => UPDATE accounts SET balance = balance +10 WHERE ID = 1 RETURNING *;
    3. Tx1 => UPDATE accounts SET balance = balance +10 WHERE ID = 2 RETURNING *;
    4. Commit Tx 1
    5. Tx2 => UPDATE accounts SET balance = balance -10 WHERE ID = 2 RETURNING *;
    6. Commit Tx 2

