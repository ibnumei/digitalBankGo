TODO
1. Seharusnya response POST http://localhost:8080/users/login mengembalikan list accounts yg dipunya user
   Sehingga saat GET http://localhost:8080/accounts/48 bisa menggunakan ID accounts dari payload token

========================================================
SECTION  1

1.1
Link dbdesigner : https://erd.dbdesigner.net/designer/schema/1689137845-digital-bank
- 1 User can have max 3 Accounts (currency is unique key (USD, EUR, IDR))
- 1x Transfer input 2 rows entries table & 1 row transfer table
1.2
setting docker images postgres:
  - docker pull postgres:12-alpine
  - docker run --name postgres12 -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=mysecretpassword -d postgres:12-alpine
  - docker exec -it postgres12 psql -U root
  - docker logs postgres12
  - docker stop postgres12
  - docker start postgres12
1.3
  - use golang-migrate => brew install golang-migrate
  - migrate create -ext sql -dir db/migration -seq {nama_file} (initialize/using migration using golang migrate)
  - migrate create -ext sql -dir db/migration -seq init_schema
  - create Makefile (for using shortcut in terminal to execute common command)
  - create postgres, createdb, dropdb, migrateup & migratedown command  at Makefile
1.4
  - using sqlc for write query db (write first query, golang CRUD codes will automatically generated)
  - brew install sqlc
  - sqlc init => generate sqlc.yaml
  - create sqlc command at Makefile
  - create account.sql in query folder, write query sql, comment at the top of query is important,
    comment will instruct sqlc how to generate golang function signature for this query. Ex `name CreateAccount :one` => createAccount is name function, one  for return 1 single Account object
  - after write query, run make sqlc, for the first time, it will generates 3 file at sqlc folder, (account.sql.go, db.go & models.go)
1.5
  - create main_test.go (connection test for db)
  - go get github.com/lib/pq for test postgres
  - go mod tidy
  - go get github.com/stretchr/testify
folder util->random.go
1.6
Example: Transfer 10 USD from bank acc1 to bank acc2
  1. Create a transfer record with amount = 10
  2. Create an account entry for acc1 with amount = -10
  3. Create an account entry for acc2 with amount = +10
  4. Update balance acc1 -10
  5. Update balance acc2 +10
  - Struct Queries di db.go hanya mendukung 1 Query Operation, tidak mendukung banyak operation,
    sehingga tidak mendukung penggunaan transaction. Maka dibuat store.go => Struct Store
  - GetAccountForUpdate in account.sql, query FOR UPDATE diganti menjadi FOR NO KEY UPDATE,
    untuk menghindari deadlock, memberi tau postgres bahwa ID(yg jadi foreign key di table lain) tidak di update
1.8
Potential Deadlock:
  Transaksi 1: Transfer $10 from account1 to account2
  Transaksi 2: Transfer $10 from account2 to account1
  Scenario:
    1. Tx1 => UPDATE accounts SET balance = balance -10 WHERE ID = 1 RETURNING *;
    2. Tx2 => UPDATE accounts SET balance = balance -10 WHERE ID = 2 RETURNING *;
    3. Tx1 => UPDATE accounts SET balance = balance + 10 WHERE ID = 2 RETURNING *;  (Lock, karena Transaksi ke 2, sedang mengupdate ID=2 dan belum selesai)
    4. Tx2 => UPDATE accounts SET balance = balance + 10 WHERE ID = 1 RETURNING *;  (DeadLock, karena Transaksi ke 4 menunggu Tx ke 1, Tx1 menunggu  Tx ke 3, Tx menunggu  Tx2)

  Scenario Avoid Deadlock:
    1. Tx1 => UPDATE accounts SET balance = balance -10 WHERE ID = 1 RETURNING *;
    2. Tx2 => UPDATE accounts SET balance = balance +10 WHERE ID = 1 RETURNING *;
    3. Tx1 => UPDATE accounts SET balance = balance +10 WHERE ID = 2 RETURNING *;
    4. Commit Tx 1
    5. Tx2 => UPDATE accounts SET balance = balance -10 WHERE ID = 2 RETURNING *;
    6. Commit Tx 2
1.10
  Trigger CI/CD : Event, Scheduled, Manually
  Urutan .yaml =>
    - Workflow
      - Job 1
        - Step 1
          - Action 1
          - Action 2
        - Step 2
      - Job 2

========================================================
SECTION 2

2.1
  - using gin for rest full api in go. Installation => $ go get -u github.com/gin-gonic/gin
  - create file server.go in folder api

2.13
  - mock db for testing using gomock => go get github.com/golang/mock/mockgen@v1.6.0
  - run which  mockgen at terminal => not found => should config/edit
  - if using .bash_profile/ .bashrc => vi ~/.bash_profile or  vi ~/.bashrc
  - if using .zshrc => vi ~/.zshrc  => press I => export PATH=$PATH:~/go/bin  => press ESC => press :wq => enter to save =>  source ~/.zshrc
  - mockgen -package mockdb -destination db/mock/store.go github.com/ibnumei/digitalBankGo/db/sqlc Store

2.15
  -  add table users, users to accounts is  1 to Many. 1 users Many Accounts, 1 Accounts 1 Users.
  - 1 Users Many Accounts, but differents currency. Ex: Users 1. Joni USD, 2. Joni EUR. If the currency value is same, is not allowed
  - create command make migrateup1Version & migratedown1Version. This  Command for up or  down 1 version from latest version at table schema_migration

2.20
  - go get -u github.com/golang-jwt/jwt/v5
  - go get github.com/o1egl/paseto

2.22
  - add authentication & authorization for each api, except create user and login user
  - A logged-in user can only create an account for him/herself
  - A logged-in user can only get accounts that he/she owns
  - A logged-in user can only list accounts that belong to him/her
  - A logged-in user can only send money from his/her own account
  - Before . Hanya bisa get list account  sesuai rule diatas
  -- name: ListAccounts :many
      SELECT * FROM  accounts
      ORDER BY id
      LIMIT $1
      OFFSET $2;
  - After 
  -- name: ListAccounts :many
      SELECT * FROM  accounts
      WHERE owner = $1
      ORDER BY id
      LIMIT $2
      OFFSET $3;
  - make sqlc (re generate sql)
  - make mock (re generate mock store for api unit test
========================================================
SECTION 3

  3.23
  - create dockerfile
    # build stage
    FROM golang:1.21-alpine3.18 AS builder
    WORKDIR /app
    COPY . .
    RUN go build -o main main.go

    # Run stage
    FROM alpine:3.18
    WORKDIR /app
    COPY --from=builder /app/main .
    COPY app.env .

    EXPOSE 8080
    CMD [ "/app/main" ]

  #docker build -t digitalbank:latest .
  #docker run --name digitalbank -p 8080:8080 -e GIN_MODE=release digitalbank:latest
  #docker container inspect postgres12 (IPAddress for postgres 172.17.0.2)
  #docker run --name digitalbank -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE="postgresql://root:mysecretpassword@172.17.0.2:5432/master_bank?sslmode=disable" digitalbank:latest
  #docker network ls, => lihat network name bridge, => docker network inspect bridge
  #docker network create bank-network
  #docker network connect bank-network postgres12
  #docker run --name digitalbank --network bank-network -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE="postgresql://root:mysecretpassword@postgres12:5432/master_bank?sslmode=disable" digitalbank:latest


